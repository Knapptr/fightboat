{"version":3,"sources":["logo.svg","fleet.js","ship.js","board.js","utlities.js","ai.js","player.js","boardSquare.js","attackBoard.js","boardRenderUtilities.js","defendBoard.js","AssignmentWindow.js","fleetstatus.js","stats.js","game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","standardFleet","ship","length","createFleet","fleetArray","fleet","forEach","el","name","push","sunk","hitStatus","hitArray","i","generateHitStatus","assignedPosition","assignToggle","this","isSunk","every","hit","point","initializeBoard","squares","row","x","y","id","String","fromCharCode","shipPos","attacked","placementWrapper","fleetId","vertical","currentLength","returnCoords","assignSquares","initX","initY","fleetID","assignedSquares","AI","aiPlacement","placementArray","assignment","vertValue","valid","Math","floor","random","coords","randomCoord","validCoord","assignedSquare","some","placedShip","placedSquare","randomPoint","betterGuess","addOrSub","either","nextGuess","count","coordinates","aiMove","arrayofAttacks","genCoord","lastAttack","duplicate","undefined","result","createPlayer","allSunk","board","attackedSquares","reset","allAssigned","checkSunk","logAttackedCoords","resultsObject","attackValidityCheck","validity","console","log","receiveAttack","results","fleetIndex","posOnShip","assignShip","index","nameID","batchAssign","validPlacementArray","ind","randomShipAssignment","aiAttack","attackRenderLogic","className","arrayResult","find","defendRenderLogic","props","attackState","AttackSquare","onClick","clickHandler","attackArray","squareID","DefendSquare","AttackBoard","playerObject","player","map","xAxis","yAxis","key","Component","DefendBoard","boardArray","Assignment","assigner","start","FleetStatus","toUpperCase","StatsBlock","aiHits","ai","filter","e","playerHits","playerSunk","aiSunk","Game","state","humanPlayer","aiPlayer","humanTurn","gameOver","message","gamePlaying","resetGame","setState","gameOverMessage","playerAssign","startGame","setTimeout","human","takeTurn","alert","display","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,iJCI9BC,EAAgB,CACzB,CACIC,KAAM,cACNC,OAAQ,GAEZ,CACID,KAAM,YACNC,OAAQ,GAEZ,CACID,KAAM,aACNC,OAAQ,GAEZ,CACID,KAAM,YACNC,OAAQ,GAEZ,CACID,KAAM,UACNC,OAAQ,IAIHC,EAAY,SAACC,GACtB,IAAIC,EAAQ,GAIZ,OAHAD,EAAWE,SAAQ,SAAAC,GC3BI,IAACC,EAAMN,ED4B1BG,EAAMI,MC5BcD,ED4BGD,EAAGN,KC5BAC,ED4BKK,EAAGL,OCpB3B,CACPM,KAAMA,EACNN,OAAQA,EACRQ,MAAM,EACNC,UAXoB,SAACT,GAErB,IADA,IAAIU,EAAW,GACNC,EAAI,EAAGA,EAAIX,EAAQW,IACxBD,EAASH,MAAK,GAElB,OAAOG,EAMIE,CAAkBZ,GAC7Ba,kBAAkB,EAElBC,aAPO,WAQHC,KAAKF,kBAAoBE,KAAKF,kBAGlCG,OAXO,WAYCD,KAAKN,UAAUQ,OAAM,SAAAZ,GAAE,OAAIA,OAC3BU,KAAKP,MAAO,IAGpBU,IAhBO,SAgBHC,GACAJ,KAAKN,UAAUU,IAAS,EACxBJ,KAAKC,gBDINb,GEhCEiB,EAAkB,WAE3B,IADA,IAAMC,EAAU,GACPV,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IADA,IAAIW,EAAM,GACDC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAIf,KAAK,CAAEgB,EAAGZ,EAAGa,EAAGD,EAAGE,GAAG,GAAD,OAAKC,OAAOC,aAAahB,EAAI,IAAMY,GAAKK,SAAS,EAAOC,UAAU,IAE/FR,EAAQd,KAAKe,GAMjB,OAAOD,G,OCVGS,EAAmB,SAACP,EAAGC,EAAGO,EAASC,GAE7C,IAAIC,EAAgBnC,EAAciC,GAAS/B,OAGvCkC,EAAe,GAUnB,OATKF,EAIMA,IAEHE,EADAV,EAAIS,EARI,EASO,CAACV,EART,GAQoBU,EAAcF,EAAQC,GAChC,CAACT,EAAEC,EAAEO,EAAQC,IAL9BE,EADAX,EAAIU,EAJI,EAKO,CAJR,GAIoBA,EAAcT,EAAEO,EAAQC,GAClC,CAACT,EAAEC,EAAEO,EAAQC,GAM/BE,GAEEC,EAAc,SAACC,EAAMC,EAAOC,EAAQN,GAC7C,IAAIO,EAAkB,GAClBvC,EAASF,EAAcwC,GAAStC,OACpC,GAAKgC,EAKD,IAAK,IAAIrB,EAAI,EAAGA,EAAIX,EAAQW,IACxB4B,EAAgBhC,KAAK,CAAEgB,EAAEa,EAAMZ,EAAEa,EAAM1B,EAAEqB,kBAL7C,IAAK,IAAIrB,EAAI,EAAGA,EAAIX,EAAQW,IACxB4B,EAAgBhC,KAAK,CAAEgB,EAAGa,EAAQzB,EAAGa,EAAGa,EAAOL,aAQvD,OAAOO,GC9BEC,EAAK,CAEdC,YAFc,WAQV,IADA,IAAIC,EAAiB,GACZ/B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIgC,OAAU,EACVC,OAAS,EACTC,OAAK,EACT,EAAG,CACCA,GAAQ,EACRD,IAAcE,KAAKC,MAAsB,EAAhBD,KAAKE,UAC9B,IAAIC,EAASlC,KAAKmC,cACdC,EACJrB,EAAiBmB,EAAO1B,EAAG0B,EAAOzB,EAAGb,EAAGiC,IACxCD,EAAaR,EAAa,WAAb,cAAiBgB,KACnB/C,SAAQ,SAAAgD,GACXV,EAAeW,MAAK,SAAAC,GAEpB,OAAQA,EAAWD,MAAK,SAAAE,GACpB,OAAQA,EAAahC,IAAM6B,EAAe7B,GAAKgC,EAAa/B,IAAM4B,EAAe5B,UAGrFqB,GAAQ,aAMD,IAAVA,GAETH,EAAenC,KAAKoC,GAGzB,OAAOD,GAGVc,YAxCc,WAyCV,OAAOV,KAAKC,MAAsB,GAAhBD,KAAKE,WAG3BE,YA5Cc,WA6CV,MAAO,CAAE3B,EAAGR,KAAKyC,cAAehC,EAAGT,KAAKyC,gBAE5CC,YA/Cc,SA+CFR,GAKR,IAJA,IACIS,EADEC,EAAS,WAAQ,OAAOb,KAAKC,MAAsB,EAAhBD,KAAKE,WAE1CY,EAAY,CAAErC,GAAI,EAAGC,EAAG,IACxBqC,EAAQ,EACJD,EAAUrC,EAAI,GAAKqC,EAAUpC,EAAI,GAAOoC,EAAUpC,EAAI,GAAKoC,EAAUrC,EAAI,GAC7EsC,IAEIH,EADa,IAAbC,IACW,GAEC,EAGZC,EADa,IAAbD,IACY,CAAEpC,EAAG0B,EAAOa,YAAYvC,EAAImC,EAAUlC,EAAGyB,EAAOa,YAAYtC,GAE5D,CAAED,EAAG0B,EAAOa,YAAYvC,EAAGC,EAAGyB,EAAOa,YAAYtC,EAAIkC,GAEjEG,GAAS,IACTD,EAAY7C,KAAKmC,eAIzB,OAAOU,GAGXG,OAxEc,SAwEPC,GAEH,IAAIC,EAEAC,EADAC,GAAY,EAIZD,EAFAF,EAAehE,OAAS,EAEXgE,EAAeA,EAAehE,OAAS,QACnCoE,EAErB,GAEQH,EADAC,GAAmC,QAArBA,EAAWG,OACdtD,KAAK0C,YAAYS,GAEjBnD,KAAKmC,cAEpBiB,EAAYH,EAAeX,MAAK,SAAAhD,GAAQ,OAAQ4D,EAAS1C,IAAMlB,EAAGyD,YAAYvC,GAAK0C,EAASzC,IAAMnB,EAAGyD,YAAYtC,YAG9F,IAAd2C,GACT,OAAOF,IC1FFK,EAAe,SAAChE,GAyFzB,MAvFe,CACXA,KAAMA,EACNH,MAAOF,EAAYH,GACnByE,SAAS,EACTC,MAAOpD,IACPqD,gBAAiB,GACjBC,MANW,WAOP3D,KAAKZ,MAAQF,EAAYH,GACzBiB,KAAKyD,MAAQpD,IACbL,KAAK0D,gBAAkB,GACvB1D,KAAKwD,SAAU,GAEnBI,YAZW,WAaP,OAAQ5D,KAAKZ,MAAMc,OAAM,SAAAZ,GAAK,OAAOA,EAAGQ,qBAE5C+D,UAfW,WAgBH7D,KAAKZ,MAAMc,OAAM,SAAAZ,GAAO,OAAoB,IAAZA,EAAGG,UACnCO,KAAKwD,SAAU,IAGvBM,kBApBW,SAoBOC,GAChB/D,KAAK0D,gBAAgBlE,KAAKuE,IAE5BC,oBAvBW,SAuBS9B,GAGhB,IAAI+B,EAgBJ,OAlBAC,QAAQC,IAAI,qBACZD,QAAQC,IAAIjC,GAERA,EAAO1B,EAAI,GAAK0B,EAAOzB,EAAI,GAC3ByD,QAAQC,IAAI,gBACRjC,EAAO1B,EAAI,GAAK0B,EAAOzB,EAAI,GAC3ByD,QAAQC,IAAI,gBACZF,GAAW,GAIXA,GAHOjE,KAAK0D,gBAAgBpB,MAAK,SAAAhD,GACjC,OAAOA,EAAGyD,YAAYvC,IAAM0B,EAAO1B,GAAKlB,EAAGyD,YAAYtC,IAAMyB,EAAOzB,MAOnEwD,GAAW,EAEbA,GAEXG,cA5CW,SA4CGlC,GAEN,IAAImC,EAAU,CAAEtB,YAAa,CAAEvC,EAAG0B,EAAO1B,EAAGC,EAAGyB,EAAOzB,KACtDT,KAAKyD,MAAMvB,EAAOzB,GAAGyB,EAAO1B,GAAGM,UAAW,EAItCd,KAAKyD,MAAMvB,EAAOzB,GAAGyB,EAAO1B,GAAGK,UACZb,KAAKZ,MAAMY,KAAKyD,MAAMvB,EAAOzB,GAAGyB,EAAO1B,GAAGK,QAAQyD,YACxDnE,IAAIH,KAAKyD,MAAMvB,EAAOzB,GAAGyB,EAAO1B,GAAGK,QAAQ0D,WACxDF,EAAQf,OAAS,OAGlBe,EAAQf,OAAS,OAGxB,OADItD,KAAK6D,YACFQ,GAEXG,WA9DW,SA8DAnD,EAAOC,EAAML,EAASqD,GAAY,IAAD,OAClBlD,EAAcC,EAAOC,EAAOgD,EAAYrD,GAC9C5B,SAAQ,SAACC,EAAGmF,GAExB,EAAKrF,MAAMkF,GAAYxE,kBAAmB,EACtC,EAAK2D,MAAMnE,EAAGmB,GAAGnB,EAAGkB,GAAGK,QAAU,CAACyD,WAAYA,EAAYC,UAAWE,EAAOC,OAAQ3F,EAAcuF,GAAYtF,UAI1H2F,YAvEW,SAuECC,GAAsB,IAAD,OAC7B5E,KAAKyD,MAAQpD,IACbuE,EAAoBvF,SAAQ,SAACyC,EAAO+C,GAChC,EAAKL,WAAW1C,EAAM,GAAGtB,EAAEsB,EAAM,GAAGrB,EAAEqB,EAAM,GAAGb,SAAS4D,OAGhEC,qBA7EW,WA8EP9E,KAAK2D,QACL3D,KAAK2E,YAAYlD,EAAGC,gBAExBqD,SAjFW,WAmFR,OADctD,EAAGuB,OAAOhD,KAAK0D,oBCvFlCsB,EAAoB,SAACjC,EAAaE,GACpC,IAAIgC,EACAC,EAAcjC,EAAekC,MAAK,SAAA7F,GAAK,OAAOA,EAAGyD,YAAYvC,IAAIuC,EAAYvC,GAAGlB,EAAGyD,YAAYtC,IAAIsC,EAAYtC,KAQnH,OAPIyE,IAEID,EADuB,QAAvBC,EAAY5B,OACA,YACI,cAIjB2B,GAELG,EAAoB,SAACC,GAEvB,OAAIA,EAAMC,YACFD,EAAMxE,QACM,YAEA,aAGT,MAIF0E,EAAe,SAACF,GAErB,OACI,yBAAKG,QAAS,WACVH,EAAMI,aAAa,CAACjF,EAAE6E,EAAM7E,EAAEC,EAAE4E,EAAM5E,KAEvCwE,UAAW,sBAAwBD,EAAkB,CAACxE,EAAE6E,EAAM7E,EAAEC,EAAE4E,EAAM5E,GAAG4E,EAAMK,cAC/EL,EAAMM,WAMVC,EAAe,SAACP,GACzB,OACI,yBAAKJ,UAAW,uBAAyBI,EAAMxE,QAAU,OAAS,SAAW,IAAKuE,EAAkBC,IAC3FA,EAAMM,WCxCVE,EAAb,iLAEQ,OACI,6BACI,yBAAKZ,UAAU,8BAAf,sBACA,yBAAKvE,GAAG,cAAcuE,UAAU,iBCHZa,EDIK9F,KAAKqF,MAAMU,OCJFN,EDISzF,KAAKqF,MAAMI,aCHtDK,EAAarC,MACZuC,KAAI,SAAC1G,EAAI2G,GAClB,OACI,yBAAKhB,UAAU,OAEV3F,EAAG0G,KAAI,SAACxF,EAAG0F,GACR,OAAO,kBAAC,EAAD,CAAcR,YAAaI,EAAapC,gBAAgB+B,aAAcA,EAAcU,IAAK3F,EAAEE,GAAIF,EAAGyF,EAAOxF,EAAGyF,EAAOP,SAAUnF,EAAEE,eAPvH,IAACoF,EAAcL,MDFlD,GAAiCW,aEApBC,EAAb,iLAEQ,OACI,6BACI,yBAAKpB,UAAU,8BAAf,cACA,yBAAKvE,GAAG,cAAcuE,UAAU,iBDYZqB,ECXKtG,KAAKqF,MAAMU,OAAOtC,ODYrCuC,KAAI,SAAC1G,EAAI2G,GACvB,OACI,yBAAKhB,UAAU,OAEV3F,EAAG0G,KAAI,SAACxF,EAAG0F,GACR,OAAO,kBAAC,EAAD,CAAcC,IAAK3F,EAAEE,GAAIiF,SAAUnF,EAAEE,GAAIG,QAASyF,EAAWL,GAAOC,GAAOrF,QAASyE,YAAagB,EAAWL,GAAOC,GAAOpF,oBANlH,IAACwF,MCjBpC,GAAiCF,aCCpBG,EAAa,SAAClB,GASvB,OACI,6BACI,yBAAK3E,GAAG,mBACJ,kBAAC,EAAD,CAAaqF,OAAQV,EAAMU,UAE3B,yBAAKd,UAAU,WACP,4BAAQO,QAASH,EAAMmB,UAAvB,4BAbZnB,EAAMU,OAAOnC,cAEb,uBAAGqB,UAAU,oBAAoBO,QAASH,EAAMoB,OAAhD,kBAEO,oDCRNC,EAAc,SAACrB,GACxB,IAAIjG,EAAQiG,EAAMU,OAAO3G,MAOzB,OAEI,yBAAK6F,UAAU,eACX,uBAAGA,UAAU,+BAA+BI,EAAM9F,KAAKoH,cAAgB,iBACnE,+BACA,4BAAI,oCAAa,oCAAa,uCAV/BvH,EAAM4G,KAAI,SAAA1G,GACb,OAAO,4BAAI,wBAAI2F,UAAW3F,EAAGG,KAAK,iBAAiB,uBAAwBH,EAAGC,MAAU,4BAAKD,EAAGL,QAAY,wBAAIgG,WAAY3F,EAAGG,KAAK,iBAAiB,uBAAyB,eAAkB,uBAAGwF,UAAU,0BCJ5M2B,EAAa,SAACvB,GACvB,IAAIwB,EAASxB,EAAMyB,GAAGpD,gBAAgBqD,QAAO,SAAAC,GAAO,MAAoB,QAAbA,EAAE1D,UACzD2D,EAAa5B,EAAMU,OAAOrC,gBAAgBqD,QAAO,SAAAC,GAAO,MAAoB,QAAbA,EAAE1D,UACjE4D,EAAa7B,EAAMyB,GAAG1H,MAAM2H,QAAO,SAAAC,GAAO,OAAOA,EAAEvH,QACnD0H,EAAS9B,EAAMU,OAAO3G,MAAM2H,QAAO,SAAAC,GAAI,OAAOA,EAAEvH,QAEpD,OAAQ,yBAAKwF,UAAU,cACnB,+BACI,4BAAI,mDAA4B,4BAAKI,EAAMU,OAAOrC,gBAAgBzE,SAClE,4BAAI,oCAAa,4BAAKgI,EAAWhI,SACjC,4BAAI,0CAAmB,4BAAKiI,EAAWjI,SACvC,4BAAI,+CAAwB,4BAAKoG,EAAMyB,GAAGpD,gBAAgBzE,SAC1D,4BAAI,oCAAa,4BAAK4H,EAAO5H,SAC7B,4BAAI,0CAAmB,4BAAKkI,EAAOlI,YCPlCmI,EAAb,2MACIC,MAAQ,CACJC,YAAa/D,EAAa,SAC1BgE,SAAUhE,EAAa,MACvBiE,WAAW,EACXC,UAAU,EACVC,QAAS,sBACTC,aAAa,GAPrB,EAUIC,UAAY,WACR,EAAKC,SACD,CACIP,YAAa/D,EAAa,SAC1BgE,SAAUhE,EAAa,MACvBiE,WAAW,EACXC,UAAU,EACVC,QAAS,sBACTC,aAAa,KAlB7B,EAqBIG,gBAAkB,WACd,OAAI,EAAKT,MAAMC,YAAY9D,QAChB,wBAAIyB,UAAU,YAAd,aAEA,wBAAIA,UAAU,YAAd,aAzBnB,EA4BI8C,aAAe,WACX,EAAKF,UAAS,SAACR,GACX,IAAItB,EAASsB,EAAMC,YAEnB,OADAvB,EAAOjB,uBACA,CAAEwC,YAAavB,OAhClC,EAmCIiC,UAAY,WACR,EAAKH,UAAS,SAACR,GACX,IAAIP,EAAKO,EAAME,SAEf,OADAT,EAAGhC,uBACI,CAAE6C,aAAa,EAAMJ,SAAST,EAAGY,QAAQ,sCAvC5D,EA0CI1E,OAAS,WACD,EAAKqE,MAAMG,WAAc,EAAKH,MAAMI,UACpC,EAAKI,SAAS,CAAEH,QAAS,mBAAoB,WACzCO,YAAW,WACP,EAAKJ,UAAS,SAAAR,GACV,IAAIP,EAAKO,EAAME,SACXW,EAAQb,EAAMC,YACFD,EAAMG,UAGtB,OADAV,EAAGhD,kBAAkBoE,EAAM9D,cAAc0C,EAAG/B,aACrC,CAAEuC,YAAaY,EAAOX,SAAUT,EAAIU,WAAW,EAAME,QAAS,qCAE1E,SAtDnB,EA0DIS,SAAS,SAACjG,GACF,EAAKmF,MAAMG,WACX,EAAKK,UAAS,SAAAR,GACV,IAAII,EACAC,EACAZ,EAAKO,EAAME,SACXW,EAAQb,EAAMC,YACdE,EAAYH,EAAMG,UACtB,GAAIU,EAAMlE,oBAAoB9B,GAO1B,OANAgG,EAAMpE,kBAAkBgD,EAAG1C,cAAclC,IACzCsF,GAAaA,EACTV,EAAGtD,SACHiE,GAAW,EACXC,EAAU,cACLD,GAAW,EACb,CAAEH,YAAaY,EAAOX,SAAUT,EAAIU,UAAWA,EAAWC,SAAUA,EAAUC,QAASA,GACzFU,MAAM,qBAEjB,EAAKpF,SA5EnB,wEAsFQ,IAAIqF,EA6BJ,OATQA,EAnBHrI,KAAKqH,MAAMM,YAGP3H,KAAKqH,MAAMI,SAiBR,yBAAK/G,GAAG,kBACHV,KAAK8H,kBACN,kBAAC,EAAD,CAAY/B,OAAQ/F,KAAKqH,MAAMC,YAAaR,GAAI9G,KAAKqH,MAAME,WAC3D,4BAAQ/B,QAASxF,KAAK4H,WAAtB,eAlBJ,yBAAKlH,GAAG,aAEJ,kBAAC,EAAD,CAAaqF,OAAQ/F,KAAKqH,MAAMC,YAAa7B,aAAczF,KAAKmI,WAChE,yBAAKzH,GAAG,aACJ,kBAAC,EAAD,CAAaqF,OAAQ/F,KAAKqH,MAAME,SAAUhI,KAAK,UAC/C,kBAAC,EAAD,CAAawG,OAAQ/F,KAAKqH,MAAMC,YAAa/H,KAAK,YAElD,kBAAC,EAAD,CAAawG,OAAQ/F,KAAKqH,MAAMC,eAXtC,yBAAK5G,GAAG,gBAAe,kBAAC,EAAD,CAAYqF,OAAQ/F,KAAKqH,MAAMC,YAAad,SAAUxG,KAAK+H,aAActB,MAAOzG,KAAKgI,aA6BtH,yBAAKtH,GAAG,eACJ,yBAAKA,GAAG,aAAauE,UAAU,YAAYjF,KAAKqH,MAAMK,SAErDW,OAxHjB,GAA0BjC,aCKXkC,MATf,WACE,OACE,6BACE,wBAAIrD,UAAU,cAAd,aACA,kBAAC,EAAD,QCIcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAM7B,c","file":"static/js/main.8500ba89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import {shipCreator} from './ship';\r\n\r\n//array of ship names and spaces\r\n\r\nexport const standardFleet = [\r\n    {\r\n        ship: \"patrol boat\",\r\n        length: 2\r\n    },\r\n    {\r\n        ship: \"submarine\",\r\n        length: 3\r\n    },\r\n    {\r\n        ship: \"battleship\",\r\n        length: 4\r\n    },\r\n    {\r\n        ship: \"destroyer\",\r\n        length: 4\r\n    },\r\n    {\r\n        ship: \"carrier\",\r\n        length: 5\r\n    }\r\n];\r\n\r\nexport const createFleet=(fleetArray)=>{\r\n    let fleet = [];\r\n    fleetArray.forEach(el => {\r\n        fleet.push(shipCreator(el.ship,el.length))\r\n    })\r\n    return fleet;\r\n}\r\n\r\n//module.exports = createFleet\r\n","\r\n\r\nexport const shipCreator = (name, length) => {\r\n    let generateHitStatus = (length) => {\r\n        let hitArray = []\r\n        for (let i = 0; i < length; i++){\r\n            hitArray.push(false)\r\n        }\r\n        return hitArray\r\n    }\r\n    let ship = {\r\n        name: name,\r\n        length: length, \r\n        sunk: false,\r\n        hitStatus: generateHitStatus(length),\r\n        assignedPosition: false,\r\n\r\n        assignToggle() {\r\n            this.assignedPosition = !this.assignedPosition;\r\n        },\r\n        \r\n        isSunk() {\r\n            if (this.hitStatus.every(el => el)) {\r\n                this.sunk = true;\r\n            }\r\n        },\r\n        hit(point) {\r\n            this.hitStatus[point] = true;\r\n            this.isSunk();\r\n        }\r\n\r\n    }\r\n\r\n    return ship\r\n}\r\n\r\n","export const initializeBoard = () => {\r\n    const squares = [];\r\n    for (let i = 0; i < 10; i++) { //rows\r\n        let row = []\r\n        for (let x = 0; x < 10; x++) {//cols\r\n            row.push({ x: i, y: x, id: `${String.fromCharCode(i + 65) + x}`, shipPos: false, attacked: false });\r\n        }\r\n        squares.push(row);\r\n    }\r\n    const attack = (coords) => { //coords given in {x:,y:}\r\n        \r\n    }\r\n\r\n    return squares\r\n};\r\n\r\n\r\n","\r\nimport {standardFleet} from './fleet'\r\n\r\nexport const  placementWrapper = (x, y, fleetId, vertical) => {\r\n            \r\n    let currentLength = standardFleet[fleetId].length\r\n    let maxSquare = 9\r\n    let boardDim = 10\r\n    let returnCoords = [];\r\n    if (!vertical) {\r\n        if (x + currentLength > maxSquare) {\r\n            returnCoords = [boardDim - currentLength,y,fleetId,vertical]\r\n        }else{returnCoords = [x,y,fleetId,vertical]}\r\n    } else if (vertical) {\r\n        if (y + currentLength > maxSquare) {\r\n            returnCoords = [x,boardDim-currentLength,fleetId,vertical]\r\n        }else{returnCoords = [x,y,fleetId,vertical]}\r\n    }\r\n    return returnCoords;\r\n}\r\nexport const assignSquares=(initX,initY, fleetID,vertical)=>{ //this returns an array of squares to assign ship placement to. \r\n    let assignedSquares = []\r\n    let length = standardFleet[fleetID].length\r\n    if (!vertical) {\r\n        for (let i = 0; i < length; i++){\r\n            assignedSquares.push({ x: initX + i, y: initY, vertical})\r\n        }\r\n    } else {\r\n        for (let i = 0; i < length; i++){\r\n            assignedSquares.push({ x:initX,y:initY+i,vertical})\r\n        }\r\n    }\r\n    \r\n    return assignedSquares;        \r\n}\r\n","\r\nimport {placementWrapper,assignSquares} from './utlities'\r\n\r\nexport const AI = {\r\n\r\n    aiPlacement(){\r\n        //rando x,y.randoVert boolean check all squares in assignSquares,\r\n        //if squares aren't assigned, then coords are valid.\r\n        //assign ship, move to next ship\r\n        //fleet loop\r\n        let placementArray = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            let assignment;\r\n            let vertValue;\r\n            let valid;\r\n            do {\r\n                valid = true;\r\n                vertValue = !!Math.floor(Math.random() * 2);\r\n                let coords = this.randomCoord();\r\n                let validCoord = \r\n                placementWrapper(coords.x, coords.y, i, vertValue)\r\n                assignment = assignSquares(...validCoord);\r\n                assignment.forEach(assignedSquare => {\r\n                    if (placementArray.some(placedShip => {\r\n                        \r\n                        return (placedShip.some(placedSquare => {\r\n                            return (placedSquare.x === assignedSquare.x && placedSquare.y === assignedSquare.y)\r\n                        }))\r\n                    })){\r\n                        valid = false;\r\n                        }\r\n                   \r\n                })\r\n                \r\n                \r\n            } while (valid === false)\r\n            \r\n            placementArray.push(assignment)\r\n            \r\n        }\r\n       return placementArray\r\n    },\r\n\r\n    randomPoint(){\r\n        return Math.floor(Math.random() * 10);\r\n    },\r\n    \r\n    randomCoord(){\r\n        return { x: this.randomPoint(), y: this.randomPoint() };\r\n    },\r\n    betterGuess(coords) {\r\n        const either = () => { return Math.floor(Math.random() * 2) }\r\n        let addOrSub;\r\n        let nextGuess = { x: -1, y: 10 }\r\n        let count = 1;\r\n        while ((nextGuess.x < 0 || nextGuess.y < 0) || (nextGuess.y > 9 || nextGuess.x > 9)) {\r\n            count++\r\n            if (either() === 0) {\r\n                addOrSub = 1;\r\n            } else {\r\n                addOrSub = -1\r\n            }\r\n            if (either() === 0) {\r\n                nextGuess = { x: coords.coordinates.x + addOrSub, y: coords.coordinates.y }\r\n            } else {\r\n                nextGuess = { x: coords.coordinates.x, y: coords.coordinates.y + addOrSub }\r\n            }\r\n            if (count >= 4) {\r\n                nextGuess = this.randomCoord();\r\n            }\r\n        }\r\n        \r\n        return nextGuess;\r\n    },\r\n\r\n    aiMove(arrayofAttacks){\r\n            \r\n        let genCoord;\r\n        let duplicate = true\r\n        let lastAttack;\r\n        if (arrayofAttacks.length > 0) {\r\n            \r\n            lastAttack = arrayofAttacks[arrayofAttacks.length - 1]\r\n        }else { lastAttack = undefined}\r\n\r\n        do {\r\n            if (lastAttack && lastAttack.result=== \"hit\") {\r\n                genCoord = this.betterGuess(lastAttack);\r\n            } else {\r\n                genCoord = this.randomCoord();\r\n            }\r\n            duplicate = arrayofAttacks.some(el => { return (genCoord.x === el.coordinates.x && genCoord.y === el.coordinates.y) })\r\n           \r\n            \r\n        } while (duplicate === true);\r\n        return genCoord;\r\n        \r\n    },\r\n    \r\n\r\n}\r\n","import { standardFleet, createFleet } from './fleet';\r\nimport { initializeBoard } from './board'\r\nimport { AI } from './ai';\r\nimport {assignSquares} from './utlities'\r\n\r\nexport const createPlayer = (name) => {\r\n    \r\n    const player = {\r\n        name: name,\r\n        fleet: createFleet(standardFleet),\r\n        allSunk: false,\r\n        board: initializeBoard(),\r\n        attackedSquares: [],\r\n        reset() {\r\n            this.fleet = createFleet(standardFleet);\r\n            this.board = initializeBoard();\r\n            this.attackedSquares = [];\r\n            this.allSunk = false;\r\n        },\r\n        allAssigned() {\r\n            return (this.fleet.every(el=>{return el.assignedPosition}))\r\n        },\r\n        checkSunk() {\r\n            if (this.fleet.every(el => {return  el.sunk === true })) {\r\n                this.allSunk = true;\r\n            }\r\n        },\r\n        logAttackedCoords(resultsObject){\r\n          this.attackedSquares.push(resultsObject)  \r\n        },\r\n        attackValidityCheck(coords) { //checks array for attack, then returns true/false- pushes value to array if true\r\n            console.log('checking validity')\r\n            console.log(coords)\r\n            let validity\r\n            if (coords.x + 1 && coords.y + 1) { //MAY NEED WORK HERE\r\n                console.log('valid coords')\r\n                if (coords.x > 9 || coords.y > 9) {\r\n                    console.log('out of range')\r\n                    validity = false;\r\n                } else if (this.attackedSquares.some(el => {//nested array, needs another .some\r\n                    return el.coordinates.x === coords.x && el.coordinates.y === coords.y\r\n                })) {\r\n                    validity = false;\r\n                } else {\r\n                    validity = true;\r\n                    \r\n                }\r\n            } else { validity = false }\r\n            \r\n            return validity\r\n        },\r\n        receiveAttack(coords) { \r\n                //results below\r\n                let results = { coordinates: { x: coords.x, y: coords.y } };\r\n                this.board[coords.y][coords.x].attacked = true; //assigns an attacked value \r\n                \r\n\r\n        \r\n                if (this.board[coords.y][coords.x].shipPos) { //marks a hit if ship is in location\r\n                    let attackedShip = this.fleet[this.board[coords.y][coords.x].shipPos.fleetIndex]\r\n                    attackedShip.hit(this.board[coords.y][coords.x].shipPos.posOnShip)\r\n                    results.result = \"hit\"\r\n                    \r\n                } else {\r\n                   results.result = \"miss\"\r\n                }\r\n                this.checkSunk();\r\n            return results\r\n        },\r\n        assignShip(initX, initY,vertical,fleetIndex){//this assigns a ship to squares\r\n            let squaresOccupied = assignSquares(initX, initY, fleetIndex, vertical);\r\n            squaresOccupied.forEach((el,index) => {\r\n                //this.board[el.y][el.x].shipPos = { fleetIndex: fleetIndex, posOnShip: index, nameID: this.fleet[fleetIndex].name}\r\n                this.fleet[fleetIndex].assignedPosition = true;\r\n                    this.board[el.y][el.x].shipPos = {fleetIndex: fleetIndex, posOnShip: index, nameID: standardFleet[fleetIndex].ship}\r\n \r\n            })\r\n        },\r\n        batchAssign(validPlacementArray) {\r\n            this.board = initializeBoard();\r\n            validPlacementArray.forEach((valid, ind) => {\r\n                this.assignShip(valid[0].x,valid[0].y,valid[0].vertical,ind)\r\n            })\r\n        },\r\n        randomShipAssignment() {\r\n            this.reset()\r\n            this.batchAssign(AI.aiPlacement());\r\n        },\r\n        aiAttack() {\r\n            let attack = AI.aiMove(this.attackedSquares)\r\n           return attack\r\n        }\r\n        \r\n    }\r\n    return player;\r\n}","import React, { Component } from 'react'\r\n\r\nconst attackRenderLogic = (coordinates, arrayofAttacks) => {\r\n    let className;\r\n    let arrayResult = arrayofAttacks.find(el=>{return el.coordinates.x===coordinates.x&&el.coordinates.y===coordinates.y})\r\n    if (arrayResult) {\r\n        if (arrayResult.result === \"hit\") {\r\n            className = \"attackHit\"\r\n        } else {className = \"attackMiss\"}\r\n    }\r\n    \r\n    //if current square & miss: class of attackMiss\r\n    return className\r\n}\r\nconst defendRenderLogic = (props) => {\r\n    let className\r\n    if (props.attackState) {\r\n        if (props.shipPos) {\r\n            className = \"attackHit\"\r\n        } else {\r\n            className = \"attackMiss\"\r\n        }\r\n    } else {\r\n        return null\r\n    }\r\n    return className;\r\n}\r\nexport const AttackSquare = (props) =>{\r\n    \r\n        return (\r\n            <div onClick={() => {\r\n                props.clickHandler({x:props.x,y:props.y})\r\n                \r\n            }} className={\"boardSquare attack \" + attackRenderLogic({x:props.x,y:props.y},props.attackArray)}>\r\n                {props.squareID}\r\n                \r\n            </div>\r\n        )\r\n    \r\n}\r\nexport const DefendSquare = (props) => {\r\n    return (\r\n        <div className={\"boardSquare defend \" + (props.shipPos ? \"ship\" : \"empty\") + \" \"+ defendRenderLogic(props) }>\r\n                {props.squareID}\r\n                \r\n            </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport {attackBoardArranger} from './boardRenderUtilities'\r\n\r\nexport class AttackBoard extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bolded centered boardTitle\">Attack Coordinates</div>\r\n                <div id=\"attackBoard\" className=\"boardElement\">\r\n                    {attackBoardArranger(this.props.player,this.props.clickHandler)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {AttackSquare,DefendSquare} from './boardSquare'\r\n\r\n\r\n\r\nexport const attackBoardArranger = (playerObject, clickHandler) => {\r\n    let board = playerObject.board\r\n    return board.map((el, xAxis) => { //rows\r\n        return (\r\n            <div className=\"row\">\r\n        \r\n                {el.map((x, yAxis) => {\r\n                    return <AttackSquare attackArray={playerObject.attackedSquares}clickHandler={clickHandler} key={x.id} x={xAxis} y={yAxis} squareID={x.id} />\r\n                })}\r\n    \r\n            </div>\r\n        \r\n        )\r\n   })\r\n}\r\nexport const defendBoardArranger = (boardArray) => {\r\n    return boardArray.map((el, xAxis) => { //rows\r\n        return (\r\n            <div className=\"row\">\r\n        \r\n                {el.map((x, yAxis) => {\r\n                    return <DefendSquare key={x.id} squareID={x.id} shipPos={boardArray[xAxis][yAxis].shipPos} attackState={boardArray[xAxis][yAxis].attacked} />\r\n                })}\r\n    \r\n            </div>\r\n        \r\n        )\r\n   })\r\n}","import React, { Component } from \"react\";\r\nimport {defendBoardArranger} from \"./boardRenderUtilities\"\r\n\r\nexport class DefendBoard extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"bolded centered boardTitle\">Your Fleet</div>\r\n                <div id=\"defendBoard\" className=\"boardElement\">\r\n                    {defendBoardArranger(this.props.player.board)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { DefendBoard } from './defendBoard';\r\n\r\n\r\nexport const Assignment = (props) => {\r\n    const readyToPlay = () => {\r\n        if (props.player.allAssigned()) {\r\n            return(\r\n            <p className=\"bolded clickable \" onClick={props.start}>Click to Start</p>)\r\n        } else {\r\n            return <p>Choose a Placement</p>\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div id=\"assignmentBoard\">\r\n                <DefendBoard player={props.player} />\r\n                </div>\r\n                <div className=\"buttons\">\r\n                        <button onClick={props.assigner}>Randomize Ship Placement</button>\r\n                        {readyToPlay()}\r\n                </div>\r\n            \r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const FleetStatus = (props) => {\r\n    let fleet = props.player.fleet;\r\n    const statusArranger = () => {\r\n        return fleet.map(el => {\r\n            return <tr><td className={el.sunk?\"sunkStatusText\":\"operationStatusText\"}>{el.name}</td><td>{el.length}</td><td className={(el.sunk?\"sunkStatusText\":\"operationStatusText\") + \" \"+\"statusBulb\"}><i className=\"fas fa-circle\"></i></td></tr>\r\n        })\r\n    }\r\n\r\n    return (\r\n        \r\n        <div className=\"fleetStatus\">\r\n            <p className=\"bolded centered statusTitle\">{props.name.toUpperCase() + \" fleet Status\"}</p>\r\n                <table>\r\n                <tr><th>Ship</th><th>Size</th><th>Status</th></tr>\r\n                {statusArranger()}\r\n                </table>\r\n\r\n            </div>\r\n            \r\n       \r\n        \r\n    )\r\n}","import React from 'react';\r\n\r\nexport const StatsBlock = (props) => {\r\n    let aiHits = props.ai.attackedSquares.filter(e => { return e.result === \"hit\" })\r\n    let playerHits = props.player.attackedSquares.filter(e => { return e.result === \"hit\" }) \r\n    let playerSunk = props.ai.fleet.filter(e => { return e.sunk })\r\n    let aiSunk = props.player.fleet.filter(e=>{return e.sunk})\r\n\r\n    return (<div className=\"statsBlock\">\r\n        <table>\r\n            <tr><td>Player Attacks Made</td><td>{props.player.attackedSquares.length}</td></tr>\r\n            <tr><td>Hits</td><td>{playerHits.length}</td></tr>\r\n            <tr><td>Ships Sunk</td><td>{playerSunk.length}</td></tr>\r\n            <tr><td>AI Attacks Made</td><td>{props.ai.attackedSquares.length}</td></tr>\r\n            <tr><td>Hits</td><td>{aiHits.length}</td></tr>\r\n            <tr><td>Ships Sunk</td><td>{aiSunk.length}</td></tr>\r\n        </table>\r\n\r\n\r\n    </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { createPlayer } from './player';\r\nimport { AttackBoard } from './attackBoard';\r\nimport { DefendBoard } from './defendBoard';\r\nimport { AI } from './ai';\r\nimport { Assignment } from './AssignmentWindow'\r\nimport { FleetStatus } from './fleetstatus'\r\nimport {StatsBlock} from './stats'\r\nexport class Game extends Component{\r\n    state = {\r\n        humanPlayer: createPlayer('human'),\r\n        aiPlayer: createPlayer('ai'),\r\n        humanTurn: true,\r\n        gameOver: false,\r\n        message: \"Place your ships...\",\r\n        gamePlaying: false,\r\n\r\n    }\r\n    resetGame = () => {\r\n        this.setState(\r\n            {\r\n                humanPlayer: createPlayer('human'),\r\n                aiPlayer: createPlayer('ai'),\r\n                humanTurn: true,\r\n                gameOver: false,\r\n                message: \"Place your ships...\",\r\n                gamePlaying: false,\r\n            })\r\n        }\r\n    gameOverMessage = () => {\r\n        if (this.state.humanPlayer.allSunk) {\r\n            return <h1 className=\"centered\">You Lose.</h1>\r\n        } else {\r\n            return <h1 className=\"centered\">You Win!</h1>\r\n        }\r\n    }\r\n    playerAssign = () => {\r\n        this.setState((state) => {\r\n            let player = state.humanPlayer;\r\n            player.randomShipAssignment();\r\n            return { humanPlayer: player }\r\n        })\r\n    }\r\n    startGame = () => {\r\n        this.setState((state) => {\r\n            let ai = state.aiPlayer\r\n            ai.randomShipAssignment()\r\n            return { gamePlaying: true, aiPlayer:ai,message:\"Awaiting Attack Coordinates...\"}\r\n        })\r\n    }\r\n    aiMove = () => {\r\n        if(!this.state.humanTurn && !this.state.gameOver){ //if player makes invalid move- AI move will not fire\r\n            this.setState({ message: \"Returning Fire\" }, () => {\r\n                setTimeout(() => {\r\n                    this.setState(state => {\r\n                        let ai = state.aiPlayer;\r\n                        let human = state.humanPlayer;\r\n                        let humanTurn = state.humanTurn;\r\n            \r\n                        ai.logAttackedCoords(human.receiveAttack(ai.aiAttack()));\r\n                        return { humanPlayer: human, aiPlayer: ai, humanTurn: true, message: \"Awaiting Attack Coordinates.\" }\r\n                    })\r\n                }, 500)\r\n            })\r\n        }\r\n    }\r\n    takeTurn=(coords)=> {\r\n        if (this.state.humanTurn) {\r\n            this.setState(state => {\r\n                let gameOver;\r\n                let message;\r\n                let ai = state.aiPlayer;\r\n                let human = state.humanPlayer;\r\n                let humanTurn = state.humanTurn;\r\n                if (human.attackValidityCheck(coords)) {\r\n                    human.logAttackedCoords(ai.receiveAttack(coords))\r\n                    humanTurn = !humanTurn\r\n                    if (ai.allSunk) {\r\n                        gameOver = true;\r\n                        message = \"Game Over!\"\r\n                    } else { gameOver = false }\r\n                    return { humanPlayer: human, aiPlayer: ai, humanTurn: humanTurn, gameOver: gameOver, message: message }\r\n                } else { alert('invalid attack!') }\r\n                \r\n            },this.aiMove)\r\n        }\r\n        \r\n    }\r\n//     checkOver() {\r\n//         if (this.state.humanPlayer.allSunk || this.state.aiPlayer.allSunk) {\r\n//             this.setState({ gameOver: true,message: \"Game Over!\" });\r\n//        }\r\n//    }\r\n    render() {\r\n        let display;\r\n        if (!this.state.gamePlaying) {\r\n            display = <div id=\"displayBoard\"><Assignment player={this.state.humanPlayer} assigner={this.playerAssign} start={this.startGame}/></div>\r\n        } else {\r\n            if (!this.state.gameOver) {\r\n                display = (\r\n                    <div id=\"playBoard\">\r\n\r\n                        <AttackBoard player={this.state.humanPlayer} clickHandler={this.takeTurn} />\r\n                        <div id=\"statusBar\">\r\n                            <FleetStatus player={this.state.aiPlayer} name=\"enemy\"/>\r\n                            <FleetStatus player={this.state.humanPlayer} name=\"player\"/>\r\n                        </div>\r\n                            <DefendBoard player={this.state.humanPlayer}/>\r\n                    </div>\r\n                        \r\n                        \r\n                    \r\n                )\r\n            } else {\r\n                display = (\r\n                    <div id=\"gameOverScreen\">\r\n                        {this.gameOverMessage()}\r\n                        <StatsBlock player={this.state.humanPlayer} ai={this.state.aiPlayer}/>\r\n                        <button onClick={this.resetGame}>Play Again</button>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return (\r\n            \r\n            <div id=\"boardWindow\">\r\n                <div id=\"messageBar\" className=\"centered\">{this.state.message}</div>\r\n                \r\n                {display}\r\n            </div>\r\n        )\r\n    } \r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Game} from './game';\nfunction App() {\n  return (\n    <div>\n      <h1 className=\"fightBoats\">FightBoat</h1>\n      <Game /> \n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}